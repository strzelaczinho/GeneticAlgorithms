#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <unistd.h>

#define N 5
#define MYSLENIE 2
#define GLODNY 1
#define ZAJEDZONY 0
#define LEFT (phnum + 4) % N
#define RIGHT (phnum + 1) % N
 
int stan[N];
int filozof[N] = {0, 1, 2, 3, 4};
int state[N];
int phil[N] = { 0, 1, 2, 3, 4 };
 
sem_t mutex;
sem_t S[N];
 
void test(int phnum)
{
    if (state[phnum] == GLODNY && state[LEFT] != ZAJEDZONY && state[RIGHT] != ZAJEDZONY) {
        // state that ZAJEDZONY
        state[phnum] = ZAJEDZONY;
 
        sleep(2);
 
        printf("Filozof %d bierze widelec %d and %d\n",
                      phnum + 1, LEFT + 1, phnum + 1);
 
        printf("Filozof %d jest najedzony\n", phnum + 1);
 
        // sem_post(&S[phnum]) has no effect
        // during takefork
        // used to wake up GLODNY philosophers
        // during putfork
        sem_post(&S[phnum]);
    }
}
 
// take up chopsticks
void take_fork(int phnum)
{
 
    sem_wait(&mutex);
 
    // state that GLODNY
    state[phnum] = GLODNY;
 
    printf("Filozof %d jest  glodny\n", phnum + 1);
 
    // eat if neighbours are not ZAJEDZONY
    test(phnum);
 
    sem_post(&mutex);
 
    // if unable to eat wait to be signalled
    sem_wait(&S[phnum]);
 
    sleep(1);
}
 
// put down chopsticks
void put_fork(int phnum)
{
 
    sem_wait(&mutex);
 
    // state that MYSLENIE
    state[phnum] = MYSLENIE;
 
    printf("Philosopher %d putting fork %d and %d down\n",
           phnum + 1, LEFT + 1, phnum + 1);
    printf("Filozof %d is mysli\n", phnum + 1);
 
    test(LEFT);
    test(RIGHT);
 
    sem_post(&mutex);
}
 
void* philospher(void* num)
{
 
    while (1) {
 
        int* i = num;
 
        sleep(1);
 
        take_fork(*i);
 
        sleep(1);
 
        put_fork(*i);
    }
}
 
int main()
{
    int i;
    pthread_t thread_id[N];
    // initialize the semaphores
    sem_init(&mutex, 0, 1);
    for (i = 0; i < N; i++)
        sem_init(&S[i], 0, 0);
 
    for (i = 0; i < N; i++) {
 
        // create philosopher processes
        pthread_create(&thread_id[i], NULL,
                       philospher, &phil[i]);
 
        printf("Filozof %d mysli\n", i + 1);
    }
 
    for (i = 0; i < N; i++)
 
        pthread_join(thread_id[i], NULL);
}